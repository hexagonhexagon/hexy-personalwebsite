<section>
    <p>I am a bit late, I think it's been almost a month since the last post. I've been finding it hard to work on any sort of personal project right now, as the YouTube demon is currently consuming all of my attention. But that changes now! I'm going to try and write something a bit shorter than last time, and we can keep the content train going. It's time for the second episode of "hexy tells you why you should do things", as we continue this series of "let's get unreasonably personal about things I care about".</p>
</section>
<section>
    <h3>so there was this cool video</h3>
    <p>This all starts from me watching this <i>absolutely fantastic</i> video called <a href="https://www.youtube.com/watch?v=I4mdMMu-3fc">for-profit (creative) software</a> by <a href="https://www.youtube.com/@EndVertex">EndVertex</a>. There are so many things that are amazing about this video, starting from the amazing 3D animation talent on display, to the way it depicts the absolute callousness of modern corporate greed, and the in-depth explanations of the technical details of animation and modeling software. And, not to forget the point of the video, what it means to have your gateway to creative expression shackled to a for-profit program that can change at any time.  No description I can write could ever do the video full justice, so seriously consider watching the entire thing, it's 1 hour 15 minutes of your time.</p>

    <p>The part that I wanted to talk about specifically was the section on trying to fight back against "predatory software practices". The video goes over their frustration (and my frustration, btw) on the movement of major software towards subscriptions instead of one-time payments, always online software, and the inflation of price points of software to beyond the reach of the typical consumer. They suggest moving to free, open-source alternatives to paid software, trying to support those alternatives, as well as trying to learn platform-independent techniques that are transferrable if you need to switch to a new software.</p>

    <p>On my <a href="https://polytropica.xyz/blog/post.php?id=3">last article</a>, I touched on wanting to have something of my own and wanting to build it from scratch. Since that article I have become aware of <a href="https://miccah.io/assets/birdfeeder.pdf">"Build Your Own Fucking Birdfeeder"</a> by Manul Laphroaig (yeah, I can swear on this site!) which succinctly describes why it is important to, as they put it, "build your own fucking birdfeeder". Wish I had put that in the last article, but oh well, I don't wanna rewrite it. Anyways, the reason I wanted to talk about my last article is because I feel like some of the thoughts around wanting to build my own things feel incomplete, and even this article doesn't fully round out why it feels <i>so</i> important to me, but EndVertex's video really put things into context for me, and I want to talk about that.</p>
</section>
<section>
    <h3>coding is power</h3>
    <p>Fundamentally, all software is code. There is a very complex chain of events that actually transform the code you write in a text editor to actual instructions the computer can execute, but at the end of the day everything the computer does is just code. What it means to be able to code is the ability to tell the computer what <b>you</b> want it to do. Computers don't really care where code comes from (although there are a lot of protections in place to prevent malicious code, I don't care about that right now), so if you have the skills to tell the computer what you want it to do, it will just do it. The corollary to this is that if all software is code, and the software doesn't work the way you want it to, <b><i>you can just change the code, and make it work the way you want it to</i></b>. The only thing holding you back from doing so is your ability to understand the code and modify it.</p>

    <p>It is not actually this simple. There are a variety of protections software companies put in place to try to stop you from doing this. First and foremost, most projects are closed-source, meaning there's no way to view the source code and compile the project from scratch. There is some hope, however. As long as you have the executable, the executable is actually just a list of machine instructions to feed to the computer, and you can decode these instructions into a more human-readable format using a disassembler, which is a program designed to do exactly this. The disassembly of a program is very far removed from the actual source code, and is quite difficult to interpret without training in, but it <i>can</i> be done, and is the basis for a whole field of security called reverse engineering. As the saying in those circles goes, "everything is open-source if you know reverse engineering".</p>

    <p>Companies also employ a variety of anti-reversing and obfuscation techniques to make their software harder to modify this way. Fundamentally, however, all obfuscation techniques are limited by the fact that all code must eventually become assembly, and assembly <i>can</i> be understood.</p>
</section>